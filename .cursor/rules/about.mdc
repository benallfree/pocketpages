---
alwaysApply: true
---

# PocketPages

This project uses the PocketBase JSVM. In code samples, nothing is awaitable and we do not use the PocketBase JS SDK at all. All demo code should use the PocketBase JSVM API.

# Documentation Style

- Do not include summary sections
- Focus on slim clients and an ethos of pure html/js rather than reactive programming
- Assume modern browsers and features.
- Assume JavaScript is enabled.

# Programming Style

- Prefer factory functions that return an API object instead of classes
- Prefer early returns

# Generating Markdown

- When proposing an edit to a markdown file, first decide if there will be code snippets in the markdown file.
- If there are no code snippets, wrap the beginning and end of your answer in backticks and markdown as the language.
- If there are code snippets, indent the code snippets with two spaces and the correct language for proper rendering. Indentations level 0 and 4 is not allowed.
- If a markdown code block is indented with any value other than 2 spaces, automatically fix it

For Markdown in packages/site only:

- Escape the EJS start tag `<%` by using `<%%`
- Use `<%%=` for variable interpolation.
- Use `<%%` for control flow like `if` statements.

# Generating code

- never run package managers
- never run servers
- never run type checkers

# PocketPages

This project uses the PocketBase JSVM. In code samples, nothing is awaitable and we do not use the PocketBase JS SDK at all. All demo code should use the PocketBase JSVM API.

# Code sample syntax

- Escape the EJS start tag `<%` by using `<%%`
- Use `<%%=` for variable interpolation.
- Use `<%%` for control flow like `if` statements.

# Documentation Style

- Do not include summary sections
- Focus on slim clients and an ethos of pure html/js rather than reactive programming
- Assume modern browsers and features.
- Assume JavaScript is enabled.

# Programming Style

- Prefer factory functions that return an API object instead of classes
- Prefer early returns

# Generating Markdown

- When proposing an edit to a markdown file, first decide if there will be code snippets in the markdown file.
- If there are no code snippets, wrap the beginning and end of your answer in backticks and markdown as the language.
- If there are code snippets, indent the code snippets with two spaces and the correct language for proper rendering. Indentations level 0 and 4 is not allowed.
- If a markdown code block is indented with any value other than 2 spaces, automatically fix it

# Generating code

- never run package managers
- never run servers
- never run type checkers
- `@apply` will not work because Tailwind does not preprocess CSS files. This is a no-build environment.
